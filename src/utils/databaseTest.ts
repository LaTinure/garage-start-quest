import { supabase } from '@/integrations/supabase/client';

export interface DatabaseTestResult {
  success: boolean;
  error?: string;
  tables: {
    super_admins: boolean;
    organisations: boolean;
    users: boolean;
    access_logs: boolean;
  };
  rlsEnabled: {
    super_admins: boolean;
    organisations: boolean;
    users: boolean;
    access_logs: boolean;
  };
}

export const testDatabaseConnection = async (): Promise<DatabaseTestResult> => {
  const result: DatabaseTestResult = {
    success: true,
    tables: {
      super_admins: false,
      organisations: false,
      users: false,
      access_logs: false
    },
    rlsEnabled: {
      super_admins: false,
      organisations: false,
      users: false,
      access_logs: false
    }
  };

  try {
    console.log('üîç Test de connectivit√© √† la base de donn√©es...');

    // Test 1: V√©rifier la connexion de base
    const { data: testData, error: testError } = await supabase
      .from('organisations')
      .select('count', { count: 'exact', head: true });

    if (testError) {
      console.error('‚ùå Erreur de connexion:', testError);
      result.success = false;
      result.error = testError.message;
      return result;
    }

    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie');

    // Test 2: V√©rifier l'existence des tables
    const tablesToCheck = ['super_admins', 'organisations', 'users', 'access_logs'];

    for (const tableName of tablesToCheck) {
      try {
        const { error } = await supabase
          .from(tableName)
          .select('*')
          .limit(1);

        if (error) {
          console.warn(`‚ö†Ô∏è Table ${tableName} non accessible:`, error.message);
          result.tables[tableName as keyof typeof result.tables] = false;
        } else {
          console.log(`‚úÖ Table ${tableName} accessible`);
          result.tables[tableName as keyof typeof result.tables] = true;
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Exception pour la table ${tableName}:`, error);
        result.tables[tableName as keyof typeof result.tables] = false;
      }
    }

    // Test 3: V√©rifier les politiques RLS (approximatif)
    try {
      const { error: rlsError } = await supabase
        .from('super_admins')
        .select('id')
        .limit(1);

      if (rlsError && rlsError.message.includes('policy')) {
        console.warn('‚ö†Ô∏è Politiques RLS actives sur super_admins');
        result.rlsEnabled.super_admins = true;
      } else {
        console.log('‚ÑπÔ∏è Politiques RLS non d√©tect√©es sur super_admins');
        result.rlsEnabled.super_admins = false;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur lors de la v√©rification RLS:', error);
    }

    console.log('üìä R√©sum√© du test:', result);
    return result;

  } catch (error) {
    console.error('‚ùå Erreur lors du test de la base de donn√©es:', error);
    result.success = false;
    result.error = error instanceof Error ? error.message : 'Erreur inconnue';
    return result;
  }
};

export const createMissingTables = async (): Promise<boolean> => {
  try {
    console.log('üîß Tentative de cr√©ation des tables manquantes...');

    // Cr√©er la table super_admins si elle n'existe pas
    const { error: superAdminError } = await supabase.rpc('create_super_admins_table');
    if (superAdminError) {
      console.warn('‚ö†Ô∏è Impossible de cr√©er super_admins:', superAdminError.message);
    } else {
      console.log('‚úÖ Table super_admins cr√©√©e ou d√©j√† existante');
    }

    // Cr√©er la table access_logs si elle n'existe pas
    const { error: accessLogsError } = await supabase.rpc('create_access_logs_table');
    if (accessLogsError) {
      console.warn('‚ö†Ô∏è Impossible de cr√©er access_logs:', accessLogsError.message);
    } else {
      console.log('‚úÖ Table access_logs cr√©√©e ou d√©j√† existante');
    }

    return true;
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des tables:', error);
    return false;
  }
};

export const initializeDatabase = async (): Promise<boolean> => {
  try {
    console.log('üöÄ Initialisation de la base de donn√©es...');

    // Test de connectivit√©
    const testResult = await testDatabaseConnection();

    if (!testResult.success) {
      console.error('‚ùå √âchec du test de connectivit√©');
      return false;
    }

    // Si les tables principales n'existent pas, essayer de les cr√©er
    if (!testResult.tables.super_admins || !testResult.tables.access_logs) {
      console.log('üîß Tables manquantes d√©tect√©es, tentative de cr√©ation...');
      await createMissingTables();
    }

    console.log('‚úÖ Initialisation de la base de donn√©es termin√©e');
    return true;

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    return false;
  }
};
